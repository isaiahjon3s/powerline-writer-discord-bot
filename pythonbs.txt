Python for Beginners: 6-Unit Class Curriculum
Unit 1: Introduction to Python and Setting Up the Environment
Objective: Familiarize students with Python, its uses, and how to set up a development environment. Introduce basic programming concepts and write their first Python program.
Topics Covered:
What is Python? Why is it popular? (e.g., simplicity, versatility, use in web development, data science, automation)

Installing Python (latest version, e.g., Python 3.12 as of 2025) and an IDE (e.g., VS Code, IDLE, or PyCharm Community Edition)

Understanding the Python interpreter and running Python scripts

Writing and running a "Hello, World!" program

Basic syntax: print() function, comments (#, """ """), and code structure

Variables and basic data types (int, float, string, boolean)

Basic input/output with input() function
Activities:
Setup Walkthrough: Guide students through installing Python and an IDE on their computers. Provide a step-by-step handout or video link for reference (e.g., python.org for installation).

First Program: Write and run a "Hello, World!" program in the IDE.

Interactive Demo: Show how to use the Python interpreter in the terminal to perform simple calculations (e.g., 2 + 3).

Variable Exploration: Create variables with different data types and print them. Example:
python
name = "Alice"
age = 25
height = 5.5
is_student = True
print("Name:", name, "Age:", age, "Height:", height, "Student?:", is_student)
Exercises:
Write a program that asks the user for their name and age, then prints a greeting: "Hello, [name]! You are [age] years old."

Create variables for a product’s name, price, and quantity, then calculate and print the total cost (price * quantity).

(Challenge) Modify the greeting program to include a boolean variable indicating if the user is a student and print it.
Resources:
Python official website: python.org

VS Code setup guide: code.visualstudio.com/docs/python/python-tutorial

Online interpreter for practice: repl.it
Duration: 2.5 hours
Unit 2: Working with Data: Strings, Numbers, and Basic Operations
Objective: Understand Python’s core data types and operations, focusing on strings, numbers, and basic arithmetic.
Topics Covered:
Numeric operations: addition, subtraction, multiplication, division, modulus (%), exponentiation (**), floor division (//)

String operations: concatenation (+), repetition (*), string methods (e.g., .upper(), .lower(), .strip())

String formatting: f-strings, .format(), and % operator

Type conversion: int(), float(), str()

Common errors: syntax errors, type errors, and debugging basics

Introduction to code readability and PEP 8 style guidelines
Activities:
Arithmetic Demo: Write a program to calculate the area of a rectangle (length * width) and print the result using an f-string.
python
length = 10
width = 5
area = length * width
print(f"The area of the rectangle is {area} square units.")
String Manipulation: Demonstrate string methods by transforming a user’s input (e.g., convert to uppercase, remove spaces).

Group Exercise: In pairs, write a program that takes two numbers from the user and performs all arithmetic operations, printing results in a formatted way.
Exercises:
Write a program that converts a temperature from Celsius to Fahrenheit (C * 9/5 + 32) and prints it with a descriptive message.

Create a program that takes a user’s full name and prints their initials (e.g., "John Doe" → "J. D.").

(Challenge) Write a program that calculates the total cost of items with tax (e.g., 8% tax rate) and formats the output to two decimal places.
Resources:
Python string methods: docs.python.org/3/library/stdtypes.html#string-methods

PEP 8 style guide: pep8.org

Online practice: codecademy.com/learn/learn-python-3
Duration: 2.5 hours
Unit 3: Control Flow: Conditionals and Logic
Objective: Teach students how to control program flow using conditional statements and logical operators to make decisions.
Topics Covered:
Boolean expressions: comparison operators (==, !=, >, <, >=, <=), logical operators (and, or, not)

if, elif, else statements

Nested conditionals

Indentation and its importance in Python

Common pitfalls: indentation errors, incorrect boolean logic

Real-world example: decision-making (e.g., grading system, eligibility checks)
Activities:
Interactive Demo: Write a program to check if a user’s age qualifies them to vote (age >= 18).
python
age = int(input("Enter your age: "))
if age >= 18:
    print("You are eligible to vote!")
else:
    print("You are not eligible to vote yet.")
Class Discussion: Discuss real-world scenarios where conditionals are used (e.g., login systems, game logic).

Group Coding: Create a program that assigns a letter grade (A, B, C, etc.) based on a numeric score input by the user.
Exercises:
Write a program that checks if a number is positive, negative, or zero and prints an appropriate message.

Create a program that determines if a year is a leap year (divisible by 4, but not by 100 unless divisible by 400).

(Challenge) Write a program that takes a user’s age and day of the week, offering a discount on movie tickets (e.g., 10% off for seniors on weekdays).
Resources:
Python control flow: docs.python.org/3/tutorial/controlflow.html

Practice problems: w3schools.com/python/python_conditions.asp
Duration: 2.5 hours
Unit 4: Loops and Iteration
Objective: Introduce loops to handle repetitive tasks and process sequences like strings and lists.
Topics Covered:
for loops: iterating over strings, ranges, and lists

while loops: condition-based iteration

Loop control statements: break, continue, pass

Nested loops

Common errors: infinite loops, off-by-one errors

Practical applications: summing numbers, searching strings
Activities:
For Loop Demo: Write a program to print each character of a string on a new line.
python
word = "Python"
for char in word:
    print(char)
While Loop Example: Create a countdown program that prints numbers from 10 to 1, then “Blast off!”.

Pair Programming: Write a program that sums all numbers from 1 to a user-entered number using a for loop.
Exercises:
Write a program that prints the first 10 multiples of a user-entered number.

Create a program that keeps asking for a password until the correct one (e.g., “secret123”) is entered.

(Challenge) Write a program that prints a multiplication table (1 to 10) using Nested loops.
Resources:
Python loops: docs.python.org/3/tutorial/controlflow.html#for-statements

Practice: programiz.com/python-programming/for-loop
Duration: 3 hours
Unit 5: Lists and Basic Data Structures
Objective: Teach students how to store and manipulate collections of data using lists and basic list operations.
Topics Covered:
Lists: creation, indexing, slicing, and modifying

List methods: append(), remove(), pop(), sort(), reverse()

Iterating over lists with for and while loops

List comprehensions (basic introduction)

Common errors: index out of range, mutable vs. immutable

Practical applications: storing multiple values, processing prophetic
Activities:
List Demo: Create and manipulate a list of student names, demonstrating append(), remove(), and sort().
python
students = ["Alice", "Bob", "Charlie"]
students.append("Dave")
students.sort()
print(students)  # ['Alice', 'Bob', 'Charlie', 'Dave']
Looping Lists: Write a program to print each item in a list with its index.

Group Exercise: Create a program that stores user-entered numbers in a list and calculates their average.
Exercises:
Write a program that creates a list of 5 user-entered names and prints them in alphabetical order.

Create a program that removes duplicates from a list of numbers entered by the user.

(Challenge) Write a program that finds the largest number in a list using a loop (without max()).
Resources:
Python lists: docs.python.org/3/tutorial/datastructures.html

Practice: learnpython.org/en/Lists
Duration: 2.5 hours
Unit 6: Functions and Basic Program Structure
Objective: Introduce functions to organize code and teach students how to create reusable, modular programs.
Topics Covered:
Defining and calling functions: def, parameters, return statements

Default parameters, keyword arguments

Scope: local vs. global variables

Modular programming: breaking code into functions

Debugging functions: common errors (e.g., missing return, parameter mismatches)

Practical applications: reusable calculations, input validation
Activities:
Function Demo: Write a function to calculate the square of a number.
python
def square(num):
    return num * num
print(square(5))  # 25
Interactive Example: Create a function that validates a user’s input (e.g., checks if a number is positive).

Group Project: Write a program with multiple functions to calculate the total cost of items with tax and print a receipt.
Exercises:
Write a function that takes a name and returns a greeting message.

Create a function that calculates the factorial of a number (e.g., 5! = 5 * 4 * 3 * 2 * 1).

(Challenge) Write a program with a function that checks if a string is a palindrome (e.g., “racecar”).
Resources:
Python functions: docs.python.org/3/tutorial/controlflow.html#defining-functions

Practice: realpython.com/python-functions/
Duration: 3 hours
Additional Notes
Teaching Approach:
Use live coding sessions to demonstrate concepts, encouraging students to follow along.

Incorporate short breaks every 45-60 minutes to maintain engagement.

Provide immediate feedback on exercises through code reviews or automated testing tools (e.g., pytest for simple checks).

Encourage questions and pair programming to foster collaboration.
Assessment:
Weekly homework assignments to reinforce each unit (e.g., small programs combining concepts).

Final project: Create a simple program (e.g., a calculator, to-do list, or quiz game) using concepts from all units.

Optional quiz after Units 3 and 6 to test understanding of conditionals, loops, and functions.
Resources for Students:
Free online platforms: repl.it, trinket.io (for running Python in the browser)

Books: "Python Crash Course" by Eric Matthes, "Automate the Boring Stuff with Python" by Al Sweigart (free online version)

Communities: Reddit (r/learnpython), Stack Overflow
Adaptations for Beginners:
Use simple, real-world examples (e.g., shopping lists, grades, budgets) to make concepts relatable.

Avoid overwhelming students with advanced topics (e.g., object-oriented programming, libraries like pandas).

Provide clear error explanations and debugging tips in each unit.
Technology Requirements:
Computers with Python 3.12+ and an IDE installed

Access to an online interpreter for students without local setup

Projector or screen-sharing for live coding demos
Unit 1: Introduction to Python & Basic Syntax
Objective: Understand Python basics, set up the environment, and write simple programs.

Topics Covered:
What is Python?

History, features, and applications

Python 2 vs. Python 3

Setting Up the Environment

Installing Python (Windows, Mac, Linux)

Using IDLE, PyCharm, VS Code, or Jupyter Notebook

Running Python scripts (python script.py)

Basic Syntax & Structure

Writing and executing a simple "Hello, World!" program

Understanding statements, indentation, and comments

Variables & Data Types

Integers, floats, strings, booleans

Variable naming rules (snake_case convention)

Dynamic typing and type checking (type())

Basic Input & Output

print() function with formatting (f-strings, .format())

input() function for user interaction

Hands-on Exercises:

Write a program that asks for the user's name and greets them.

Perform basic arithmetic operations and print results.

Unit 2: Control Flow & Loops
Objective: Learn how to make decisions and repeat actions in Python.

Topics Covered:
Conditional Statements

if, elif, else

Logical operators (and, or, not)

Comparison operators (==, !=, >, <, >=, <=)

Loops

while loops (indefinite iteration)

for loops (definite iteration) with range()

break, continue, and pass statements

Error Handling Basics

try, except, else, finally

Hands-on Exercises:

Write a number guessing game.

Print multiplication tables using loops.

Check if a number is prime.

Unit 3: Data Structures (Lists, Tuples, Dictionaries, Sets)
Objective: Understand how to store and manipulate collections of data.

Topics Covered:
Lists

Creating, indexing, slicing

List methods (append(), remove(), pop(), sort(), etc.)

List comprehensions

Tuples

Immutable sequences

Packing and unpacking

Dictionaries

Key-value pairs

Accessing, adding, and modifying items

Dictionary methods (keys(), values(), items())

Sets

Unordered, unique elements

Set operations (union, intersection, difference)

Hands-on Exercises:

Store student grades in a list and compute the average.

Create a dictionary for a contact book (name → phone number).

Remove duplicates from a list using sets.

Unit 4: Functions & Modules
Objective: Learn to write reusable code and organize programs efficiently.

Topics Covered:
Functions

Defining functions (def)

Parameters vs. arguments

Return statements

Default arguments, keyword arguments

Variable scope (local vs. global)

Lambda Functions

Anonymous functions (lambda x: x + 1)

Modules & Libraries

Importing modules (import math, from math import sqrt)

Creating and using custom modules

Popular built-in modules (math, random, datetime)

Hands-on Exercises:

Write a function to calculate factorial.

Create a module with utility functions (e.g., string reversal).

Use random to simulate a dice roll.

Unit 5: File Handling & Exception Handling
Objective: Learn to read/write files and handle errors gracefully.

Topics Covered:
File Operations

Opening files (open(), modes: r, w, a, r+)

Reading (read(), readline(), readlines())

Writing (write(), writelines())

Closing files (close(), with statement)

Exception Handling

Common exceptions (ValueError, FileNotFoundError, etc.)

Custom exceptions (raise)

Hands-on Exercises:

Read a text file and count word occurrences.

Write a program that logs errors to a file.

Unit 6: Introduction to Object-Oriented Programming (OOP)
Objective: Understand the basics of OOP in Python.

Topics Covered:
Classes & Objects

Defining a class (class)

Creating objects (instances)

The __init__ method (constructor)

Attributes & Methods

Instance vs. class attributes

Instance vs. static methods

Inheritance

Parent and child classes

Method overriding (super())

Special Methods (Dunder Methods)

__str__, __repr__, __len__

Hands-on Exercises:

Create a BankAccount class with deposit/withdraw methods.

Build a Vehicle → Car inheritance example.

Final Project (Combining All Concepts)
Option 1: A simple text-based game (e.g., Hangman, Tic-Tac-Toe).

Option 2: A contact management system (add, search, delete contacts).

Option 3: A quiz application (read questions from a file, track scores).